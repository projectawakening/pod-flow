// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { MerkleProofSystem } from "../../systems/MerkleProofSystem.sol";
import { VerifyParams, MultiProofVerifyParams } from "../../systems/types.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type MerkleProofSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "evefrontier", name: "MerkleProofSyste" }))
MerkleProofSystemType constant merkleProofSystem = MerkleProofSystemType.wrap(
  0x737965766566726f6e746965720000004d65726b6c6550726f6f665379737465
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title MerkleProofSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library MerkleProofSystemLib {
  error MerkleProofSystemLib_CallingFromRootSystem();

  function verify(MerkleProofSystemType self, VerifyParams memory verifyParams) internal view returns (bool) {
    return CallWrapper(self.toResourceId(), address(0)).verify(verifyParams);
  }

  function multiProofVerify(
    MerkleProofSystemType self,
    MultiProofVerifyParams memory multiProofVerifyParams
  ) internal view returns (bool) {
    return CallWrapper(self.toResourceId(), address(0)).multiProofVerify(multiProofVerifyParams);
  }

  function verify(CallWrapper memory self, VerifyParams memory verifyParams) internal view returns (bool) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert MerkleProofSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_verify_VerifyParams.verify, (verifyParams));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (bool));
  }

  function multiProofVerify(
    CallWrapper memory self,
    MultiProofVerifyParams memory multiProofVerifyParams
  ) internal view returns (bool) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert MerkleProofSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _multiProofVerify_MultiProofVerifyParams.multiProofVerify,
      (multiProofVerifyParams)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (bool));
  }

  function verify(RootCallWrapper memory self, VerifyParams memory verifyParams) internal view returns (bool) {
    bytes memory systemCall = abi.encodeCall(_verify_VerifyParams.verify, (verifyParams));

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (bool));
  }

  function multiProofVerify(
    RootCallWrapper memory self,
    MultiProofVerifyParams memory multiProofVerifyParams
  ) internal view returns (bool) {
    bytes memory systemCall = abi.encodeCall(
      _multiProofVerify_MultiProofVerifyParams.multiProofVerify,
      (multiProofVerifyParams)
    );

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (bool));
  }

  function callFrom(MerkleProofSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(MerkleProofSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(MerkleProofSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(MerkleProofSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(MerkleProofSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (MerkleProofSystemType) {
    return MerkleProofSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(MerkleProofSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _verify_VerifyParams {
  function verify(VerifyParams memory verifyParams) external;
}

interface _multiProofVerify_MultiProofVerifyParams {
  function multiProofVerify(MultiProofVerifyParams memory multiProofVerifyParams) external;
}

using MerkleProofSystemLib for MerkleProofSystemType global;
using MerkleProofSystemLib for CallWrapper global;
using MerkleProofSystemLib for RootCallWrapper global;
