// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { PoseidonAttestationSystem } from "../../systems/PoseidonAttestationSystem.sol";
import { FullVerifyZKProofParams, DistanceAttestationParams } from "../../systems/types.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type PoseidonAttestationSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "evefrontier", name: "PoseidonAttestat" }))
PoseidonAttestationSystemType constant poseidonAttestationSystem = PoseidonAttestationSystemType.wrap(
  0x737965766566726f6e74696572000000506f736569646f6e4174746573746174
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title PoseidonAttestationSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library PoseidonAttestationSystemLib {
  error PoseidonAttestationSystemLib_CallingFromRootSystem();
  error PoseidonAttestation_ZKProofInvalid();
  error PoseidonAttestation_ZKSignerInvalid();
  error PoseidonAttestation_DistanceSquaredMetersInvalid();
  error PoseidonAttestation_PodDataTypeInvalid();
  error PoseidonAttestation_StaleTimestamp();

  function poseidonAttestation(
    PoseidonAttestationSystemType self,
    uint256 smartObjectId,
    uint256 toObjectId,
    FullVerifyZKProofParams calldata verifyZKProofParams,
    DistanceAttestationParams calldata distanceAttestationParams
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).poseidonAttestation(
        smartObjectId,
        toObjectId,
        verifyZKProofParams,
        distanceAttestationParams
      );
  }

  function poseidonAttestation(
    CallWrapper memory self,
    uint256 smartObjectId,
    uint256 toObjectId,
    FullVerifyZKProofParams calldata verifyZKProofParams,
    DistanceAttestationParams calldata distanceAttestationParams
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert PoseidonAttestationSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _poseidonAttestation_uint256_uint256_FullVerifyZKProofParams_DistanceAttestationParams.poseidonAttestation,
      (smartObjectId, toObjectId, verifyZKProofParams, distanceAttestationParams)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function poseidonAttestation(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    uint256 toObjectId,
    FullVerifyZKProofParams calldata verifyZKProofParams,
    DistanceAttestationParams calldata distanceAttestationParams
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _poseidonAttestation_uint256_uint256_FullVerifyZKProofParams_DistanceAttestationParams.poseidonAttestation,
      (smartObjectId, toObjectId, verifyZKProofParams, distanceAttestationParams)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(PoseidonAttestationSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(PoseidonAttestationSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(
    PoseidonAttestationSystemType self,
    address from
  ) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(PoseidonAttestationSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(PoseidonAttestationSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (PoseidonAttestationSystemType) {
    return PoseidonAttestationSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(PoseidonAttestationSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _poseidonAttestation_uint256_uint256_FullVerifyZKProofParams_DistanceAttestationParams {
  function poseidonAttestation(
    uint256 smartObjectId,
    uint256 toObjectId,
    FullVerifyZKProofParams calldata verifyZKProofParams,
    DistanceAttestationParams calldata distanceAttestationParams
  ) external;
}

using PoseidonAttestationSystemLib for PoseidonAttestationSystemType global;
using PoseidonAttestationSystemLib for CallWrapper global;
using PoseidonAttestationSystemLib for RootCallWrapper global;
