// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ShipSystem } from "../../systems/ShipSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type ShipSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "evefrontier", name: "ShipSystem" }))
ShipSystemType constant shipSystem = ShipSystemType.wrap(
  0x737965766566726f6e746965720000005368697053797374656d000000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title ShipSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library ShipSystemLib {
  error ShipSystemLib_CallingFromRootSystem();

  function setInteractionDistance(ShipSystemType self, uint256 smartObjectId, uint256 interactionDistance) internal {
    return CallWrapper(self.toResourceId(), address(0)).setInteractionDistance(smartObjectId, interactionDistance);
  }

  function setInteractionDistance(
    CallWrapper memory self,
    uint256 smartObjectId,
    uint256 interactionDistance
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ShipSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _setInteractionDistance_uint256_uint256.setInteractionDistance,
      (smartObjectId, interactionDistance)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setInteractionDistance(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    uint256 interactionDistance
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _setInteractionDistance_uint256_uint256.setInteractionDistance,
      (smartObjectId, interactionDistance)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(ShipSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(ShipSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(ShipSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(ShipSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(ShipSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (ShipSystemType) {
    return ShipSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(ShipSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _setInteractionDistance_uint256_uint256 {
  function setInteractionDistance(uint256 smartObjectId, uint256 interactionDistance) external;
}

using ShipSystemLib for ShipSystemType global;
using ShipSystemLib for CallWrapper global;
using ShipSystemLib for RootCallWrapper global;
