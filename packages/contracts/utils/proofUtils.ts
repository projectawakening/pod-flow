import * as snarkjs from 'snarkjs';

// --- Type Definitions (Align with snarkjs types) ---

/**
 * Interface representing the structure of the Groth16 proof object.
 * Based on snarkjs types and standard proof.json format.
 */
export interface Groth16Proof {
    pi_a: string[];
    pi_b: string[][];
    pi_c: string[];
    protocol: 'groth16'; // Expecting groth16
    curve: string;
}

/**
 * Type representing the ordered array of public signal values.
 * Based on snarkjs types and standard public.json format.
 */
export type PublicSignals = string[];

/**
 * Interface representing the combined proof file structure often generated
 * by wrapper scripts (like the GPC flow).
 * Use this to extract 'proof' and reconstruct 'publicSignals' before calling the utility.
 */
export interface CombinedGPCProofData {
    proof: Groth16Proof;
    boundConfig: any; // Configuration used for the proof
    revealedClaims: any; // Revealed values (need processing to get publicSignals)
    // Potentially other fields...
}

// --- Utility Function ---

/**
 * Generates the Solidity calldata for verifying a Groth16 proof using snarkjs.
 *
 * NOTE: This function expects the raw proof object and the correctly ordered
 * public signals array. The caller is responsible for extracting/constructing
 * these from the source files (e.g., proof.json and public.json generated by snarkjs/GPC).
 *
 * @param proof - The Groth16 proof object (matching the Groth16Proof interface).
 * @param publicSignals - The ordered array of public signal values (string[]).
 * @returns A promise that resolves with the formatted calldata string.
 *          This string needs to be parsed (likely JSON) by the caller to get the
 *          individual components (a, b, c, Input) for the Solidity contract.
 */
export async function generateGroth16ProofCalldata(proof: Groth16Proof, publicSignals: PublicSignals): Promise<string> {
    console.log(`
--- Generating Groth16 Calldata from Provided Objects ---`);

    // 1. Basic Validation of Inputs
    if (!proof || !proof.pi_a || !proof.pi_b || !proof.pi_c || proof.protocol !== 'groth16') {
        throw new Error('Invalid Groth16Proof object provided.');
    }
    if (!publicSignals || !Array.isArray(publicSignals)) {
        throw new Error('Invalid PublicSignals array provided.');
    }
    console.log(`  Proof Protocol: ${proof.protocol}, Curve: ${proof.curve}`);
    console.log(`  Number of Public Signals: ${publicSignals.length}`);

    // 2. Generate Calldata using snarkjs
    let calldata: string = '';
    try {
        console.log(`  Calling snarkjs.groth16.exportSolidityCallData...`);
        // Directly use the provided objects
        calldata = await snarkjs.groth16.exportSolidityCallData(proof, publicSignals);

        if (!calldata || typeof calldata !== 'string' || calldata.length === 0) {
            throw new Error("snarkjs.groth16.exportSolidityCallData returned empty or invalid data.");
        }

        console.log(`--- Calldata Generated Successfully ---`);
        // console.log("Calldata String:\n", calldata); // Optional: log the data itself
        return calldata;

    } catch (error: any) {
        console.error(`  ERROR during snarkjs calldata generation: ${error.message}`);
        console.error(error.stack);
        throw error;
    } finally {
        // Terminate snarkjs workers if possible
        if (typeof (snarkjs as any)?.thread?.terminateAll === 'function') {
            await (snarkjs as any).thread.terminateAll();
        }
    }
}